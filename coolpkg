#! /usr/bin/env python

import re
import sys
import stat
import collections
import hashlib
import os
import os.path
import tempfile
import shutil
import urllib.request

Pkg = collections.namedtuple('Pkg', ['storepath','pkgpath', 'deps', 'script', 'args', 'sha256'])

def parsepkg(store, pkgpath, args):
	pkgpath = os.path.abspath(pkgpath)
	startdir = os.getcwd()
	pkgdirpath = os.path.dirname(pkgpath)
	deps = collections.OrderedDict()
	script = ""
	header = True
	startenv = os.environ.copy()
	with open(pkgpath) as f:
		for line in f:
			os.chdir(pkgdirpath)
			if header:
				if line.startswith("#!"):
					header = False
					script += line
				elif line.startswith(".dep"):
					for name in deps:
						os.environ[name] = deps[name].storepath
					line = os.path.expandvars(line)
					m = re.search(r"^\.dep\s+([a-zA-Z_\.][a-zA-Z_\.0-9]*)\s+([^\s]+)(.*)$", line.strip())
					if m == None:
						raise Exception("bad .dep directive: " + line)
					name = m.group(1)
					deppath = m.group(2)
					depargs = m.group(3)
					if deppath.startswith("http://") or deppath.startswith("https://"):
						deppath, depargs = dlcoolpkg(deppath, depargs)
					deppkg = parsepkg(store, deppath, depargs)
					deps[name] = deppkg
					os.environ.clear()
					os.environ.update(startenv)
				elif line.strip() == "":
					pass
				else:
					raise Exception("unknown directive: " + line)
			else:
				script += line

			os.chdir(startdir)

	dgst = hashlib.sha256()
	for name in deps:
		dgst.update(name.encode('utf8'))
		dgst.update(deps[name].sha256.encode('utf8'))
	dgst.update(args.encode('utf8'))
	dgst.update(script.encode('utf8'))

	sha256=dgst.hexdigest()
	pkg = Pkg(storepath=os.path.join(store, sha256), pkgpath=pkgpath, sha256=sha256, deps=deps, args=args, script=script)
	buildpkg(pkg)
	return pkg

def buildpkg(pkg):
	startenv = os.environ.copy()

	successMarkerPath = os.path.join(pkg.storepath, ".coolpkg_ok")
	if os.path.exists(pkg.storepath):
		if os.path.exists(successMarkerPath):
			print("skipping build for " + pkg.pkgpath + "(already built)")
			return
		else:
			shutil.rmtree(pkg.storepath)

	os.makedirs(pkg.storepath)

	dependencies = {"out" : pkg.storepath}
	for name in pkg.deps:
		dependencies[name] = pkg.deps[name].storepath

	builddir = tempfile.mkdtemp()
	buildscript = os.path.join(builddir, "builder")
	with open(buildscript, 'wb') as f:
		f.write(pkg.script.encode('utf8'))

	st = os.stat(buildscript)
	os.chmod(buildscript, st.st_mode | stat.S_IEXEC)
	startdir = os.getcwd()
	os.chdir(builddir)
	
	for name in dependencies:
		os.environ[name] = dependencies[name]

	os.environ["PATH"] = ""

	result = os.system(buildscript+" "+pkg.args)

	os.chdir(startdir)
	if result == 0:
		with open(successMarkerPath, 'wb') as f:
			f.write(":)".encode('utf8'))
	else:
		raise Exception("build for package "+pkg.pkgpath+" failed")

	os.environ.clear()
	os.environ.update(startenv)


def sha256_checksum(filename, block_size=65536):
    sha256 = hashlib.sha256()
    with open(filename, 'rb') as f:
        for block in iter(lambda: f.read(block_size), b''):
            sha256.update(block)
    return sha256.hexdigest()

def dlcoolpkg(u, args):
	args = args.strip().split(" ")
	sha256sum = args[0]
	args = " ".join(args[1:])
	print("downloading package from...", u)
	d = tempfile.mkdtemp()
	fname = u.split("/")[-1]
	dlpath = os.path.join(d, fname)
	urllib.request.urlretrieve(u, dlpath)
	if sha256_checksum(dlpath) != sha256sum:
		raise Exception("failed to validate checksum")
	return dlpath, args

def getbuiltinspath():
	return os.path.join(os.path.dirname(os.path.realpath(__file__)), "builtins")

def main():
	os.environ['builtins'] = getbuiltinspath()
	storepath = os.path.join(os.path.expanduser("~"), "coolpkgstore")
	pkg = parsepkg(storepath, sys.argv[1], " ".join(sys.argv[2:]))
	print(pkg.storepath)

main()